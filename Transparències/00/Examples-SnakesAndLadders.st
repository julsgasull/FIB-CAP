Object subclass: #SnakesAndLadders	instanceVariableNames: 'players squares turn die over'	classVariableNames: ''	poolDictionaries: ''	category: 'Examples-SnakesAndLadders'!!SnakesAndLadders commentStamp: 'on 3/14/2006 19:05' prior: 0!SnakesAndLadders example playToEndA simple board game in which players roll a die to move from the starting square to the end. A square may contain a snake (moves you back) or a ladder (moves you up). If youland on a square already occupied, you go back to the start. If you move past the end, you reverse direction the remaining number of moves.See http://en.wikipedia.org/wiki/Snakes_and_ladders for the rules of the gameSnakesAndLadders has the following responsibilities:- enable scripting of an initial configuration of squares and players- keep track of the rules of the game- keep track whose turn it is to play- initiate a move- play a game to the end- report on moves and intermediate game states- stop when the game is overTypical usage (see the example):- Instantiate a new SnakesAndLadders- Add squares, snakes and ladders to build the game board - Join players- Play single moves or PlayToEnd!!SnakesAndLadders methodsFor: 'initialize-release' stamp: 'on 3/18/2006 15:13'!add: aSquare 	squares add: aSquare.	aSquare setPosition: squares size board: self! !!SnakesAndLadders methodsFor: 'initialize-release' stamp: 'on 3/20/2006 10:16'!initialize	super initialize.	die := Die new.	squares := OrderedCollection new.	players := OrderedCollection new.	turn := 1.	over := false.! !!SnakesAndLadders methodsFor: 'initialize-release' stamp: 'jjddpp 9/4/2012 12:23'!invariant	"Should also check that snakes and ladders lead to ordinary squares, and do not bounce	past the beginning or end of the board."	^ squares size > 1		and: [players size > 1		and: [turn >= 1		and: [turn <= players size]]]! !!SnakesAndLadders methodsFor: 'initialize-release' stamp: 'on 3/18/2006 12:10'!join: aPlayer	players add: aPlayer.	aPlayer moveTo: self firstSquare.! !!SnakesAndLadders methodsFor: 'initialize-release' stamp: 'on 3/16/2006 11:30'!reset	die := Die new.	turn := 1.	over := false.	players do: [:each | each moveTo: self firstSquare ].	self assert: self invariant.! !!SnakesAndLadders methodsFor: 'testing' stamp: 'on 3/14/2006 16:30'!at: position	^ squares at: position! !!SnakesAndLadders methodsFor: 'testing' stamp: 'on 3/14/2006 16:54'!currentPlayer	^ players at: turn! !!SnakesAndLadders methodsFor: 'testing' stamp: 'on 3/14/2006 16:43'!firstSquare	^ squares first! !!SnakesAndLadders methodsFor: 'testing' stamp: 'on 3/18/2006 15:04'!isNotOver	^ self isOver not! !!SnakesAndLadders methodsFor: 'testing' stamp: 'on 3/18/2006 15:04'!isOver	^ over! !!SnakesAndLadders methodsFor: 'testing' stamp: 'on 3/14/2006 16:59'!lastPosition	^ squares size! !!SnakesAndLadders methodsFor: 'testing' stamp: 'on 3/14/2006 16:22'!turn	^ turn! !!SnakesAndLadders methodsFor: 'playing' stamp: 'on 3/14/2006 17:10'!checkResult	^ self currentPlayer position = self lastPosition		ifTrue: [			over := true.			' -- ', self currentPlayer asString, ' wins!!'			]		ifFalse: [ '' ]! !!SnakesAndLadders methodsFor: 'playing' stamp: 'on 5/17/2006 16:49'!playOneMove	| result |	self assert: self invariant.	^ self isOver 		ifTrue: ['The game is over!!']		ifFalse: 			[result := (self currentPlayer moveWith: die) , self checkResult.			self upDateTurn.			result]! !!SnakesAndLadders methodsFor: 'playing' stamp: 'jjddpp 9/9/2012 19:21'!playToEnd	"SnakesAndLadders example playToEnd"	Transcript open.	Transcript		show: self asString;		cr;		cr.	[self isNotOver] whileTrue: 			[Transcript				show: self playOneMove asString;				cr.			Transcript				show: self asString;				cr;				cr]! !!SnakesAndLadders methodsFor: 'playing' stamp: 'on 3/14/2006 16:21'!upDateTurn	turn := 1 + (turn\\players size).! !!SnakesAndLadders methodsFor: 'accessors' stamp: 'on 3/15/2006 15:01'!players	"needed for testing"	^ players! !!SnakesAndLadders methodsFor: 'accessors' stamp: 'on 3/15/2006 13:29'!setDie: aDie	"For testing only. Can play the game with a loaded die."	die := aDie.! !!SnakesAndLadders methodsFor: 'printing' stamp: 'jjddpp 9/4/2012 11:57'!printOn: aStream	squares do: [:each | each printOn: aStream].! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!SnakesAndLadders class	instanceVariableNames: ''!!SnakesAndLadders class methodsFor: 'documentation' stamp: 'on 10/28/2007 13:51'!example	"self example playToEnd"	^ (self new)		add: FirstSquare new;		add: (LadderSquare forward: 4);		add: BoardSquare new;		add: BoardSquare new;		add: BoardSquare new;		add: BoardSquare new;		add: (LadderSquare forward: 2);		add: BoardSquare new;		add: BoardSquare new;		add: BoardSquare new;		add: (SnakeSquare back: 6);		add: BoardSquare new;		join: (GamePlayer named: 'Jack');		join: (GamePlayer named: 'Jill');		yourself! !!SnakesAndLadders class methodsFor: 'documentation' stamp: 'on 10/28/2007 13:51'!example2	"self example2 playToEnd"	^ (self new)		add: FirstSquare new;		add: BoardSquare new;		add: (LadderSquare forward: 4);		add: BoardSquare new;		add: BoardSquare new;		add: (SnakeSquare back: 2);		add: BoardSquare new;		add: (LadderSquare forward: 3);		add: BoardSquare new;		add: BoardSquare new;		add: (SnakeSquare back: 4);		add: BoardSquare new;		add: BoardSquare new;		join: (GamePlayer named: 'Jack');		join: (GamePlayer named: 'Jill');		yourself! !Object subclass: #Die	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Examples-SnakesAndLadders'!!Die commentStamp: 'on 3/14/2006 19:06' prior: 0!Responsibilities:- Yields a random number from 1 to 6 ;-)!!Die methodsFor: 'playing' stamp: 'on 3/14/2006 15:41'!roll	^ (1 to: 6) atRandom! !Object subclass: #GamePlayer	instanceVariableNames: 'name square'	classVariableNames: ''	poolDictionaries: ''	category: 'Examples-SnakesAndLadders'!!GamePlayer commentStamp: 'on 3/14/2006 19:07' prior: 0!Responsibilities:- Keep track of the square you are on- Roll the die- Attempt to move the resulting number of squares!!GamePlayer methodsFor: 'initialize-release' stamp: 'on 3/18/2006 12:08'!invariant	^ square notNil		and: [ name notNil ]! !!GamePlayer methodsFor: 'initialize-release' stamp: 'on 3/18/2006 12:49'!setName: aName	name := aName.! !!GamePlayer methodsFor: 'private' stamp: 'on 3/14/2006 15:53'!leaveCurrentSquare	square notNil ifTrue: [ square remove: self ].! !!GamePlayer methodsFor: 'playing' stamp: 'on 3/18/2006 15:21'!moveTo: aSquare	self leaveCurrentSquare.	square := aSquare landHere: self.! !!GamePlayer methodsFor: 'playing' stamp: 'on 3/23/2006 09:04'!moveWith: aDie	| roll destination |	self assert: self invariant.	roll := aDie roll.	destination := square forwardBy: roll.	self moveTo: destination.	^ name, ' rolls ', roll asString, ' and lands at ', square asString! !!GamePlayer methodsFor: 'testing' stamp: 'on 3/15/2006 14:57'!name	^ name! !!GamePlayer methodsFor: 'testing' stamp: 'on 3/14/2006 17:03'!position	^ square position! !!GamePlayer methodsFor: 'printing' stamp: 'on 3/14/2006 15:32'!printOn: aStream	aStream nextPutAll: name! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!GamePlayer class	instanceVariableNames: ''!!GamePlayer class methodsFor: 'instance creation' stamp: 'on 3/18/2006 12:48'!named: aName	^ self new setName: aName! !Object subclass: #BoardSquare	instanceVariableNames: 'position player board'	classVariableNames: ''	poolDictionaries: ''	category: 'Examples-SnakesAndLadders'!!BoardSquare commentStamp: 'on 3/14/2006 19:27' prior: 0!Responsibilities:- Remember position in the board- Keep track of any players on this square- Send on any players passing through- Displays itself with its position and any player who might be on it, e.g., [7 Jack]!!BoardSquare methodsFor: 'playing' stamp: 'on 3/15/2006 15:26'!backwardBy: squares 	^ squares = 0 		ifTrue: [self destination]		ifFalse: 			[self isFirstSquare 				ifTrue: [self nextSquare forwardBy: squares - 1]				ifFalse: [self previousSquare backwardBy: squares - 1]]! !!BoardSquare methodsFor: 'playing' stamp: 'on 3/15/2006 15:26'!destination	^ self! !!BoardSquare methodsFor: 'playing' stamp: 'on 3/18/2006 11:43'!forwardBy: squares	self assert: self invariant.	^ squares = 0 		ifTrue: [self destination]		ifFalse: 			[self isLastSquare 				ifFalse: [self nextSquare forwardBy: squares - 1]				ifTrue: [self previousSquare backwardBy: squares - 1]]! !!BoardSquare methodsFor: 'playing' stamp: 'on 3/15/2006 15:43'!landHere: aPlayer	^ self isOccupied		ifTrue: [ board firstSquare landHere: aPlayer ]		ifFalse: [ player := aPlayer. self ]! !!BoardSquare methodsFor: 'playing' stamp: 'on 3/14/2006 16:32'!nextSquare	self assert: self isLastSquare not.	^ board at: position + 1! !!BoardSquare methodsFor: 'playing' stamp: 'on 3/14/2006 16:32'!previousSquare	self assert: self isFirstSquare not.	^ board at: position - 1! !!BoardSquare methodsFor: 'playing' stamp: 'on 3/14/2006 16:14'!remove: aPlayer	self assert: player = aPlayer.	player := nil.! !!BoardSquare methodsFor: 'printing' stamp: 'on 3/14/2006 17:18'!contents	^ self isOccupied		ifTrue: [ ' ', player asString ]		ifFalse: [ '' ]! !!BoardSquare methodsFor: 'printing' stamp: 'on 3/14/2006 16:08'!printOn: aStream	aStream nextPutAll: '[', position printString, self contents, ']'.! !!BoardSquare methodsFor: 'initialize-release' stamp: 'jjddpp 9/4/2012 12:23'!invariant	^ board notNil		and: [ position notNil		and: [ position >= 0 		and: [ position <= board lastPosition]]]! !!BoardSquare methodsFor: 'initialize-release' stamp: 'on 3/18/2006 15:13'!setPosition: aNumber board: aBoard 	position := aNumber.	board := aBoard! !!BoardSquare methodsFor: 'testing' stamp: 'on 3/14/2006 16:12'!isFirstSquare	^ position = 1! !!BoardSquare methodsFor: 'testing' stamp: 'on 3/20/2006 10:17'!isLastSquare	^ position = board lastPosition! !!BoardSquare methodsFor: 'testing' stamp: 'on 3/14/2006 16:40'!isOccupied	^ player notNil! !!BoardSquare methodsFor: 'testing' stamp: 'on 3/14/2006 17:03'!position	^ position! !BoardSquare subclass: #LadderSquare	instanceVariableNames: 'forward'	classVariableNames: ''	poolDictionaries: ''	category: 'Examples-SnakesAndLadders'!!LadderSquare commentStamp: 'on 3/17/2006 10:36' prior: 0!Responsibilities:- If a player lands here, send him or her up the ladder (forward # squares)- Displays itself as a square with a positive offset, e.g., [6]3+>!!LadderSquare methodsFor: 'playing' stamp: 'on 3/15/2006 15:26'!destination	^ self forwardBy: forward! !!LadderSquare methodsFor: 'printing' stamp: 'on 3/16/2006 14:35'!printOn: aStream	super printOn: aStream.	aStream nextPutAll: forward asString, '+>'.! !!LadderSquare methodsFor: 'initialize-release' stamp: 'on 3/18/2006 12:49'!setForward: aNumber	forward := aNumber.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!LadderSquare class	instanceVariableNames: ''!!LadderSquare class methodsFor: 'instance creation' stamp: 'on 3/18/2006 12:50'!forward: number	^ self new setForward: number! !BoardSquare subclass: #FirstSquare	instanceVariableNames: 'players'	classVariableNames: ''	poolDictionaries: ''	category: 'Examples-SnakesAndLadders'!!FirstSquare commentStamp: 'on 3/14/2006 19:06' prior: 0!Responsibilities:- Allows multiple players to be added or removed [normal squares can only hold a single player]!!FirstSquare methodsFor: 'printing' stamp: 'on 3/14/2006 15:35'!contents	^ players inject: '' into:			[ :list :each | list , ' ', each asString ]! !!FirstSquare methodsFor: 'initialize-release' stamp: 'on 3/14/2006 15:30'!initialize	players := OrderedCollection new.! !!FirstSquare methodsFor: 'initialize-release' stamp: 'on 3/15/2006 15:29'!landHere: aPlayer	players add: aPlayer.! !!FirstSquare methodsFor: 'testing' stamp: 'on 3/18/2006 11:10'!isOccupied	^ players size > 0! !!FirstSquare methodsFor: 'playing' stamp: 'on 3/14/2006 16:15'!remove: aPlayer	self assert: (players includes: aPlayer).	players remove: aPlayer.! !TestCase subclass: #MetaclassHierarchyTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Examples-SnakesAndLadders'!!MetaclassHierarchyTest commentStamp: 'on 3/19/2006 11:33' prior: 0!Demonstrate the relationship between classes and metaclasses!!MetaclassHierarchyTest methodsFor: 'running' stamp: 'on 10/28/2007 15:49'!testHierarchy	"The class hierarchy"	self assert: SnakeSquare superclass = BoardSquare.	self assert: BoardSquare superclass = Object.	self assert: Object superclass superclass = nil.	"The parallel metaclass hierarchy"	self assert: SnakeSquare class name = 'SnakeSquare class'.	self assert: SnakeSquare class superclass = BoardSquare class.	self assert: BoardSquare class superclass = Object class.	self assert: Object class superclass superclass = Class.	self assert: Class superclass = ClassDescription.	self assert: ClassDescription superclass = Behavior.	self assert: Behavior superclass = Object.	"The Metaclass hierarchy"	self assert: SnakeSquare class class = Metaclass.	self assert: BoardSquare class class = Metaclass.	self assert: Object class class = Metaclass.	self assert: Class class class = Metaclass.	self assert: ClassDescription class class = Metaclass.	self assert: Behavior class class = Metaclass.	self assert: Metaclass superclass = ClassDescription.	"The fixpoint"	self assert: Metaclass class class = Metaclass! !Die subclass: #LoadedDie	instanceVariableNames: 'roll'	classVariableNames: ''	poolDictionaries: ''	category: 'Examples-SnakesAndLadders'!!LoadedDie commentStamp: 'on 3/17/2006 10:50' prior: 0!For testing purposes. When rolled, a loaded die returns a fixed value.!!LoadedDie methodsFor: 'playing' stamp: 'on 3/18/2006 15:24'!roll	self assert: roll notNil.	^ roll! !!LoadedDie methodsFor: 'playing' stamp: 'on 3/18/2006 15:25'!roll: aNumber	self assert: ((1 to: 6) includes: aNumber).	roll := aNumber.! !BoardSquare subclass: #SnakeSquare	instanceVariableNames: 'back'	classVariableNames: ''	poolDictionaries: ''	category: 'Examples-SnakesAndLadders'!!SnakeSquare commentStamp: 'on 3/20/2006 09:14' prior: 0!Responsibilities:- If a player lands here, send him or her backwards (back # squares)- Displays itself as a square with a negative offset, e.g., <-3[5]!!SnakeSquare methodsFor: 'playing' stamp: 'on 3/15/2006 15:26'!destination	^ self backwardBy: back! !!SnakeSquare methodsFor: 'printing' stamp: 'on 3/16/2006 14:35'!printOn: aStream	aStream nextPutAll: '<-', back asString.	super printOn: aStream.! !!SnakeSquare methodsFor: 'initialize-release' stamp: 'on 3/18/2006 12:50'!setBack: aNumber	back := aNumber.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!SnakeSquare class	instanceVariableNames: ''!!SnakeSquare class methodsFor: 'instance creation' stamp: 'on 3/18/2006 12:50'!back: number	^ self new setBack: number! !TestCase subclass: #SnakesAndLaddersTest	instanceVariableNames: 'eg loadedDie jack jill'	classVariableNames: ''	poolDictionaries: ''	category: 'Examples-SnakesAndLadders'!!SnakesAndLaddersTest commentStamp: 'on 3/15/2006 13:24' prior: 0!Play a rigged game and check the results.!!SnakesAndLaddersTest methodsFor: 'running' stamp: 'on 3/16/2006 09:58'!example	^ SnakesAndLadders example! !!SnakesAndLaddersTest methodsFor: 'running' stamp: 'on 3/16/2006 09:58'!setUp	eg := self example.	loadedDie := LoadedDie new.	eg setDie: loadedDie.	jack := eg players first.	jill := eg players last.! !!SnakesAndLaddersTest methodsFor: 'running' stamp: 'on 3/23/2006 09:06'!testExample	self assert: eg currentPlayer = jack.	loadedDie roll: 1.	eg playOneMove.	self assert: jack position = 6.	self assert: eg currentPlayer = jill.	loadedDie roll: 5.	eg playOneMove.	self assert: jill position = 1.	self assert: eg currentPlayer = jack.	loadedDie roll: 5.	eg playOneMove.	self assert: jack position = 5.	self assert: eg currentPlayer = jill.	loadedDie roll: 4.	eg playOneMove.	self assert: jill position = 1.	self assert: eg currentPlayer = jack.	loadedDie roll: 6.	eg playOneMove.	self assert: jack position = 5.	self assert: eg currentPlayer = jill.	loadedDie roll: 6.	eg playOneMove.	self assert: jill position = 9.	self assert: eg currentPlayer = jack.	loadedDie roll: 5.	eg playOneMove.	self assert: jack position = 10.	self assert: eg currentPlayer = jill.	loadedDie roll: 5.	eg playOneMove.	self assert: jill position = 1.	self assert: eg currentPlayer = jack.	loadedDie roll: 2.	eg playOneMove.	self assert: jack position = 12.	self assert: eg isOver! !!SnakesAndLaddersTest methodsFor: 'running' stamp: 'on 3/18/2006 15:01'!testStartPosition	self assert: eg lastPosition = 12.	self assert: eg isNotOver.	self assert: eg currentPlayer = jack.	self assert: eg firstSquare isFirstSquare.	self assert: eg firstSquare isLastSquare not.	self assert: eg firstSquare position = 1.	self assert: eg firstSquare isOccupied.	self assert: (eg at: eg lastPosition) isFirstSquare not.	self assert: (eg at: eg lastPosition) isLastSquare.	self assert: (eg at: eg lastPosition) position = 12.	self assert: (eg at: eg lastPosition) isOccupied not.	self assert: jack name = 'Jack'.	self assert: jill name = 'Jill'.	self assert: jack position = 1.	self assert: jill position = 1! !SnakesAndLaddersTest subclass: #SnakesAndLaddersTest2	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Examples-SnakesAndLadders'!!SnakesAndLaddersTest2 commentStamp: 'on 3/17/2006 10:50' prior: 0!Some tests for a second example.!!SnakesAndLaddersTest2 methodsFor: 'running' stamp: 'on 3/16/2006 09:59'!example	^ SnakesAndLadders example2! !!SnakesAndLaddersTest2 methodsFor: 'running' stamp: 'on 3/18/2006 15:04'!testExample	self assert: jack name = 'Jack'.	self assert: jill name = 'Jill'.	self assert: jack position = 1.	self assert: jill position = 1.	self assert: eg currentPlayer = jack.	loadedDie roll: 1.	eg playOneMove.	self assert: jack position = 2.	self assert: eg currentPlayer = jill.	loadedDie roll: 2.	eg playOneMove.	self assert: jill position = 7.	self assert: eg currentPlayer = jack.	loadedDie roll: 3.	eg playOneMove.	self assert: jack position = 5.	self assert: eg currentPlayer = jill.	loadedDie roll: 1.	eg playOneMove.	self assert: jill position = 7.	self assert: eg currentPlayer = jack.	loadedDie roll: 2.	eg playOneMove.	self assert: jack position = 1.	self assert: eg currentPlayer = jill.	loadedDie roll: 5.	eg playOneMove.	self assert: jill position = 12.	self assert: eg currentPlayer = jack.	loadedDie roll: 6.	eg playOneMove.	self assert: jack position = 7.	self assert: eg currentPlayer = jill.	loadedDie roll: 1.	eg playOneMove.	self assert: jill position = 13.	self assert: eg isOver! !